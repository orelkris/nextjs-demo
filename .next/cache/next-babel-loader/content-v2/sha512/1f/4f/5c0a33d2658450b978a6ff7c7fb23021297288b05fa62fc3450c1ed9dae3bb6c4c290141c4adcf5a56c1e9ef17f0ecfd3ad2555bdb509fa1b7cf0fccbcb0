{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from 'react';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\n\nconst MeetupDetail = props => {\n  const meetupDetails = {\n    id: 'm1',\n    title: 'first meetups',\n    image: {\n      src: 'https://upload.wikimedia.org/wikipedia/commons/a/ab/Panorama_of_Moscow_Kremlin.jpg',\n      alt: 'Kremlin and Red Square'\n    },\n    address: 'Red Square, Moscow',\n    description: 'This is a first meetup'\n  };\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetupDetails, _objectSpread({}, props.meetupData))]\n  });\n};\n\nexport async function getStaticPaths() {\n  const connect = await MongoClient.connect('mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = connect.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupsFind = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  connect.close();\n  return {\n    fallback: false,\n    paths: meetupsFind.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const connect = await MongoClient.connect('mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = connect.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupFind = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  console.log(meetupFind);\n  connect.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupFind._id.toString(),\n        title: meetupFind.title,\n        image: {\n          src: meetupFind.image,\n          alt: meetupFind.title\n        },\n        address: meetupFind.address,\n        description: meetupFind.description\n      }\n    }\n  };\n}\nexport default MeetupDetail;","map":null,"metadata":{},"sourceType":"module"}