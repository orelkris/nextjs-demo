{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/krisassaurus/repos/learningNext/02-starting-project-repeat/pages/[meetupId]/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Fragment } from 'react';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\n\nconst MeetupDetail = props => {\n  const meetupDetails = {\n    id: 'm1',\n    title: 'first meetups',\n    image: {\n      src: 'https://upload.wikimedia.org/wikipedia/commons/a/ab/Panorama_of_Moscow_Kremlin.jpg',\n      alt: 'Kremlin and Red Square'\n    },\n    address: 'Red Square, Moscow',\n    description: 'This is a first meetup'\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetails, _objectSpread({}, props.meetupData), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\nexport async function getStaticPaths() {\n  const connect = await MongoClient.connect('mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = connect.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupsFind = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  connect.close();\n  return {\n    fallback: false,\n    paths: meetupsFind.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const connect = await MongoClient.connect('mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = connect.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetupFind = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId)\n  });\n  console.log(meetupFind);\n  connect.close();\n  return {\n    props: {\n      meetupData: {\n        id: meetupFind._id.toString(),\n        title: meetupFind.title,\n        image: {\n          src: meetupFind.image,\n          alt: meetupFind.title\n        },\n        address: meetupFind.address,\n        description: meetupFind.description\n      }\n    }\n  };\n}\nexport default MeetupDetail;","map":{"version":3,"sources":["/home/krisassaurus/repos/learningNext/02-starting-project-repeat/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetails","MongoClient","ObjectId","Head","MeetupDetail","props","meetupDetails","id","title","image","src","alt","address","description","meetupData","getStaticPaths","connect","db","meetupsCollection","collection","meetupsFind","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","meetupFind","findOne","console","log"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,aAAP,MAA0B,wCAA1B;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAMC,aAAa,GAAG;AACpBC,IAAAA,EAAE,EAAE,IADgB;AAEpBC,IAAAA,KAAK,EAAE,eAFa;AAGpBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,GAAG,EAAE,oFADA;AAELC,MAAAA,GAAG,EAAE;AAFA,KAHa;AAOpBC,IAAAA,OAAO,EAAE,oBAPW;AAQpBC,IAAAA,WAAW,EAAE;AARO,GAAtB;AAWA,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQR,KAAK,CAACS,UAAN,CAAiBN;AAAzB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEH,KAAK,CAACS,UAAN,CAAiBD;AAAnD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,aAAD,oBAAmBR,KAAK,CAACS,UAAzB;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArBD;;AAuBA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,OAAO,GAAG,MAAMf,WAAW,CAACe,OAAZ,CACpB,2GADoB,CAAtB;AAIA,QAAMC,EAAE,GAAGD,OAAO,CAACC,EAAR,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,WAAW,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAA1B;AAEAP,EAAAA,OAAO,CAACQ,KAAR;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,WAAW,CAACO,GAAZ,CAAiBC,MAAD,KAAa;AAClCC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADJ;AAD0B,KAAb,CAAhB;AAFF,GAAP;AAQD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMd,OAAO,GAAG,MAAMf,WAAW,CAACe,OAAZ,CACpB,2GADoB,CAAtB;AAIA,QAAMC,EAAE,GAAGD,OAAO,CAACC,EAAR,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,UAAU,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACjDb,IAAAA,GAAG,EAAE,IAAIpB,QAAJ,CAAa4B,QAAb;AAD4C,GAA1B,CAAzB;AAIAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AAEAlB,EAAAA,OAAO,CAACQ,KAAR;AAEA,SAAO;AACLnB,IAAAA,KAAK,EAAE;AACLS,MAAAA,UAAU,EAAE;AACVP,QAAAA,EAAE,EAAE2B,UAAU,CAACZ,GAAX,CAAeS,QAAf,EADM;AAEVvB,QAAAA,KAAK,EAAE0B,UAAU,CAAC1B,KAFR;AAGVC,QAAAA,KAAK,EAAE;AACLC,UAAAA,GAAG,EAAEwB,UAAU,CAACzB,KADX;AAELE,UAAAA,GAAG,EAAEuB,UAAU,CAAC1B;AAFX,SAHG;AAOVI,QAAAA,OAAO,EAAEsB,UAAU,CAACtB,OAPV;AAQVC,QAAAA,WAAW,EAAEqB,UAAU,CAACrB;AARd;AADP;AADF,GAAP;AAcD;AAED,eAAeT,YAAf","sourcesContent":["import { Fragment } from 'react';\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\n\nconst MeetupDetail = (props) => {\n  const meetupDetails = {\n    id: 'm1',\n    title: 'first meetups',\n    image: {\n      src: 'https://upload.wikimedia.org/wikipedia/commons/a/ab/Panorama_of_Moscow_Kremlin.jpg',\n      alt: 'Kremlin and Red Square',\n    },\n    address: 'Red Square, Moscow',\n    description: 'This is a first meetup',\n  };\n\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name=\"description\" content={props.meetupData.description} />\n      </Head>\n      <MeetupDetails {...props.meetupData} />\n    </Fragment>\n  );\n};\n\nexport async function getStaticPaths() {\n  const connect = await MongoClient.connect(\n    'mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const db = connect.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetupsFind = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  connect.close();\n\n  return {\n    fallback: false,\n    paths: meetupsFind.map((meetup) => ({\n      params: {\n        meetupId: meetup._id.toString(),\n      },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n\n  const connect = await MongoClient.connect(\n    'mongodb+srv://krisassaurus:G6882061Data!@cluster0.tovkjo4.mongodb.net/meetups?retryWrites=true&w=majority'\n  );\n\n  const db = connect.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetupFind = await meetupsCollection.findOne({\n    _id: new ObjectId(meetupId),\n  });\n\n  console.log(meetupFind);\n\n  connect.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: meetupFind._id.toString(),\n        title: meetupFind.title,\n        image: {\n          src: meetupFind.image,\n          alt: meetupFind.title,\n        },\n        address: meetupFind.address,\n        description: meetupFind.description,\n      },\n    },\n  };\n}\n\nexport default MeetupDetail;\n"]},"metadata":{},"sourceType":"module"}